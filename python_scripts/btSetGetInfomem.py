#!/usr/bin/python
import sys, struct, serial, binascii, time

def wait_for_ack():
   ddata = ""
   ack = struct.pack('B', 0xff)
   while ddata != ack:
      ddata = ser.read(1)
   return


if len(sys.argv) < 2:
   print "no device specified"
   print "You need to specify the serial port of the device you wish to connect to"
   print "example:"
   print "   setgetRWC.py Com12"
   print "or"
   print "   setgetRWC.py /dev/rfcomm0"
else:
   ser = serial.Serial(sys.argv[1], 460800)
   ser.flushInput()
   time.sleep(2)   
# set Infomem
   #ser.write(struct.pack('BBBB', 0x8e, 0x80, 0x00, 0x00))
   print "----------------------------------- PSAD info Mem D Set: " 
   inArg1 = [0x24, 0x80, 0x00, 0x00, 
   0x60, 0x02, 0x01, 0xc0, 0x20, 0x00, 0x5c, 0x9b, 0x39, 0x00, 0x02, 0x80, 0x10, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x02, 0x02, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xee, 
   0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
   0xdd, 0xdd, 0xdd, 0xcc, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x88, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x66, 0x55, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]  
   inArg2 = [0x24, 0x80, 0x00, 0x00, 
   0x00, 0x03, 0x00, 0x04, 0xa3, 0x10, 0x05, 0x05, 0x00, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 
   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0xee, 
   0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
   0xdd, 0xdd, 0xdd, 0xcc, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x88, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x66, 0x55, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]  
   inArg = [0x24, 0x0a, 0, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,   
   0x24, 0x0a, 10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
   0x24, 0x0a, 20, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
   0x24, 0x0a, 30, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
   0x24, 0x0a, 40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]

   #inArg = [0x24, 0x0a, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]   
   #ser.write(inArg)
   #wait_for_ack()
   #inArg = [0x24, 0x0a, 10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]   
   #ser.write(inArg)
   #wait_for_ack()
   #inArg = [0x24, 0x0a, 20, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]   
   #ser.write(inArg)
   #wait_for_ack()
   #inArg = [0x24, 0x0a, 30, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]   
   #ser.write(inArg)
   #wait_for_ack()
   #inArg = [0x24, 0x0a, 40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]   
   ser.write(inArg)
   wait_for_ack()
   print "----------------------------------- PSAD info Mem D Get: " 
# get Infomem
   ser.write(struct.pack('BBBB', 0x25, 0x80, 0x00, 0x00))
   wait_for_ack()

   cnt=0
   try:
      while 1:
         buf_len = ser.inWaiting()
         if buf_len>=130:
            data = ser.read(2)   
            buf_len -= 2
            print "rx:  ", binascii.hexlify(data), data
            while buf_len>0:
               if buf_len >16:
                  data = ser.read(16)   
                  buf_len -=16
               else:
                  data = ser.read(buf_len)   
                  buf_len =0               
               print "rx:%02X"% (cnt),  binascii.hexlify(data), data
               cnt+=1
               #print cnt, buf_len
               
            print "130 bytes received"
            
   except KeyboardInterrupt:
#close serial port
      ser.close()
      print
      print "All done"

#close serial port
   #ser.close()
   #print
   #print "All done"
